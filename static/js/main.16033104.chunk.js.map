{"version":3,"sources":["components/ScoreKeeper/index.js","components/Pad/pad.js","App.js","serviceWorker.js","index.js"],"names":["ScoreKeeper","props","className","score","topScore","Pads","onClick","clickedImage","id","alt","name","src","image","shuffle","array","i","length","j","Math","floor","random","App","state","pictures","showAlert","showSuccess","clickedpictures","setState","indexOf","push","console","log","handleIncrement","makeShuffle","title","this","style","opacity","map","picture","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ovCAoCeA,MAjCf,SAAqBC,GACnB,OAGE,4BAAQC,UAAU,UAEhB,yBAAKA,UAAU,OACb,4CAIA,yBAAKA,UAAU,OACjB,yBAAKA,UAAU,qBACf,0GAIA,yBAAKA,UAAU,OACb,wEAIA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SAAQ,8CAAoBD,EAAME,QACjD,yBAAKD,UAAU,SAAQ,2CAAiBD,EAAMG,cCd3CC,G,MAVF,SAAAJ,GAAK,OAChB,yBAAKC,UAAU,MAAMI,QAAS,kBAAML,EAAMM,aAAaN,EAAMO,MAC3D,yBAAKN,UAAU,iBACb,yBAAKO,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,QACjC,yBAAKV,UAAU,gBCDrB,SAASW,EAAQC,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,E,IAoGMO,E,2MAhGbC,MAAQ,CACNC,WACApB,MAAO,EACPC,SAAU,EACVoB,UAAW,EACXC,YAAa,EACbC,gBAAiB,I,EAGnBnB,aAAe,SAAAC,GAEb,IAAIkB,EAAkB,EAAKJ,MAAMI,gBAC7BvB,EAAQ,EAAKmB,MAAMnB,MACnBC,EAAW,EAAKkB,MAAMlB,SAC1B,EAAKuB,SAAS,CACZH,UAAW,KAIwB,IAAjCE,EAAgBE,QAAQpB,IAE1BkB,EAAgBG,KAAKrB,GACrBsB,QAAQC,IAAIL,GAEZ,EAAKM,kBAEL,EAAKC,eACyB,KAArB,EAAKX,MAAMnB,MAIpB,EAAKwB,SAAS,CACZF,YAAa,EACbtB,MAAO,EACPuB,gBAAiB,MAInB,EAAKC,SAAS,CACZxB,MAAO,EACPuB,gBAAiB,KAEnBI,QAAQC,IAAI,aACZ,EAAKJ,SAAS,CACZH,UAAW,KAIXrB,EAAQC,GACV,EAAKuB,SAAS,CACZvB,SAAUD,K,EAMhB6B,gBAAkB,WAEhB,EAAKL,SAAS,CAAExB,MAAO,EAAKmB,MAAMnB,MAAQ,K,EAI5C8B,YAAc,WACZ,EAAKN,SAAS,CAAEJ,SAAUV,EAAQU,M,wEAG1B,IAAD,OACP,OACE,yBAAKrB,UAAU,aACb,kBAAC,EAAD,CACEgC,MAAM,cACN/B,MAAOgC,KAAKb,MAAMnB,MAClBC,SAAU+B,KAAKb,MAAMlB,WAGvB,yBAEEF,UAAU,QACVkC,MAAO,CAAEC,QAASF,KAAKb,MAAME,YAH/B,wCAQA,yBAAKtB,UAAU,OACZiC,KAAKb,MAAMC,SAASe,KAAI,SAAAC,GAAO,OAC9B,kBAAC,EAAD,CACE/B,GAAI+B,EAAQ/B,GACZI,MAAO2B,EAAQ3B,MACfL,aAAc,EAAKA,wB,GAzFfiC,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCZNC,EAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.16033104.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./scorekeeper.css\";\r\n\r\nfunction ScoreKeeper(props) {\r\n  return (\r\n\r\n\r\n    <header className=\"scoreD\">\r\n     \r\n      <div className=\"row\">\r\n        <h1>Clicky Game</h1>\r\n        </div>\r\n\r\n\r\n        <div className=\"row\">\r\n      <div className=\"col-md-12 col-ctr\">\r\n      <h2>Click each bird only once to gather scores or to beat the highest score!</h2>\r\n      </div>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <p>(Game over if you click an image twice!)</p>\r\n      </div>\r\n\r\n      \r\n        <div className=\"row\">\r\n            <div className=\"score\"><h6>Current Score: {props.score}</h6></div>\r\n            <div className=\"score\"><h6>High Score: {props.topScore}</h6></div>\r\n          \r\n        </div>\r\n\r\n        \r\n        \r\n    </header>\r\n  );\r\n}\r\nexport default ScoreKeeper;","import React from \"react\";\r\nimport \"./pad.css\";\r\n\r\nconst Pads = props => (\r\n  <div className=\"pad\" onClick={() => props.clickedImage(props.id)}>\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={props.image} />\r\n      <div className=\"overlay\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Pads;","import React, { Component } from \"react\";\nimport pictures from \"./pads.json\";\nimport ScoreKeeper from \"./components/ScoreKeeper\";\nimport Pad from \"./components/Pad/pad\";\n\n// the random shuffling of pictures once clicked\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    pictures,\n    score: 0,\n    topScore: 0,\n    showAlert: 0,\n    showSuccess: 0,\n    clickedpictures: []\n  };\n\n  clickedImage = id => {\n    // updating the state of score\n    let clickedpictures = this.state.clickedpictures;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    this.setState({\n      showAlert: 0\n    });\n\n    // selecting id of indexed picture\n    if (clickedpictures.indexOf(id) === -1) {\n      // pushing and storing that id of the clicked picture\n      clickedpictures.push(id);\n      console.log(clickedpictures);\n      // executing the score function\n      this.handleIncrement();\n      // trigerring the reshuffling function\n      this.makeShuffle();\n    } else if (this.state.score === 18) {\n      /* console.log (\"you win\") */\n      // tell player he has achieved the highest score\n      // reset score to zero\n      this.setState({\n        showSuccess: 1,\n        score: 0,\n        clickedpictures: []\n      });\n    } else {\n       // player lost and resetting to zero\n      this.setState({\n        score: 0,\n        clickedpictures: []\n      });\n      console.log(\"duplicate\");\n      this.setState({\n        showAlert: 1\n      });\n    }\n\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n      });\n    }\n  };\n\n  // increment score by 1\n  handleIncrement = () => {\n    // updating the component state\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  // shuffle up images\n  makeShuffle = () => {\n    this.setState({ pictures: shuffle(pictures) });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <ScoreKeeper\n          title=\"clicky Game\"\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n\n        <div\n        \n          className=\"alert\"\n          style={{ opacity: this.state.showAlert }}>\n        \n          You already clicked that, Game over! \n          </div>\n\n        <div className=\"row\">\n          {this.state.pictures.map(picture => (\n            <Pad\n              id={picture.id}\n              image={picture.image} \n              clickedImage={this.clickedImage}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}